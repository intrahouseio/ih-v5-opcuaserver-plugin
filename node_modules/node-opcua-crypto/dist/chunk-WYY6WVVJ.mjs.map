{"version":3,"sources":["../source_nodejs/read.ts","../source_nodejs/read_certificate_revocation_list.ts","../source_nodejs/read_certificate_signing_request.ts","../source_nodejs/generate_private_key_filename.ts"],"sourcesContent":["// ---------------------------------------------------------------------------------------------------------------------\r\n// node-opcua-crypto\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\r\n// Copyright (c) 2022-2024 - Sterfive.com\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n//\r\n// This  project is licensed under the terms of the MIT license.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\n// Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\nimport assert from \"assert\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { createPrivateKey, createPublicKey } from \"crypto\";\r\nimport { Certificate, CertificatePEM, DER, PEM, PublicKey, PublicKeyPEM, PrivateKeyPEM, PrivateKey } from \"../source/common.js\";\r\nimport { convertPEMtoDER, identifyPemType, removeTrailingLF, toPem } from \"../source/crypto_utils.js\";\r\nimport sshpk from \"sshpk\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nfunction _readPemFile(filename: string): PEM {\r\n    assert(typeof filename === \"string\");\r\n    return removeTrailingLF(fs.readFileSync(filename, \"utf-8\"));\r\n}\r\n\r\nfunction _readPemOrDerFileAsDER(filename: string): DER {\r\n    if (filename.match(/.*\\.der/)) {\r\n        return fs.readFileSync(filename) as Buffer;\r\n    }\r\n    const raw_key: string = _readPemFile(filename);\r\n    return convertPEMtoDER(raw_key);\r\n}\r\n\r\n/**\r\n * read a DER or PEM certificate from file\r\n */\r\nexport function readCertificate(filename: string): Certificate {\r\n    return _readPemOrDerFileAsDER(filename) as Certificate;\r\n}\r\n\r\n/**\r\n * read a DER or PEM certificate from file\r\n */\r\nexport function readPublicKey(filename: string): PublicKey {\r\n    if (filename.match(/.*\\.der/)) {\r\n        const der = fs.readFileSync(filename) as Buffer;\r\n        return createPublicKey(der);\r\n    } else {\r\n        const raw_key: string = _readPemFile(filename);\r\n        return createPublicKey(raw_key);\r\n    }\r\n}\r\n\r\n// console.log(\"createPrivateKey\", (crypto as any).createPrivateKey, process.env.NO_CREATE_PRIVATEKEY);\r\n\r\nfunction myCreatePrivateKey(rawKey: string | Buffer): PrivateKey {\r\n    if (!createPrivateKey || process.env.NO_CREATE_PRIVATEKEY) {\r\n        // we are not running nodejs or createPrivateKey is not supported in the environment\r\n        if (rawKey instanceof Buffer) {\r\n            const pemKey = toPem(rawKey, \"PRIVATE KEY\");\r\n            assert([\"RSA PRIVATE KEY\", \"PRIVATE KEY\"].indexOf(identifyPemType(pemKey) as string) >= 0);\r\n            return { hidden: pemKey };\r\n        }\r\n        return { hidden: ensureTrailingLF(rawKey) };\r\n    }\r\n    // see https://askubuntu.com/questions/1409458/openssl-config-cuases-error-in-node-js-crypto-how-should-the-config-be-updated\r\n    const backup = process.env.OPENSSL_CONF;\r\n    process.env.OPENSSL_CONF = \"/dev/null\";\r\n    const retValue = createPrivateKey(rawKey);\r\n    process.env.OPENSSL_CONF = backup;\r\n    return { hidden: retValue };\r\n}\r\n\r\nexport function makePrivateKeyThumbPrint(privateKey: PrivateKey): Buffer {\r\n    //   // .export({ format: \"der\", type: \"pkcs1\" });\r\n    //   if (typeof privateKey === \"string\") {\r\n    //\r\n    //   } else {\r\n    //    return makeSHA1Thumbprint(privateKey.hidden);\r\n    //   }\r\n    // to do\r\n    return Buffer.alloc(0);\r\n}\r\n\r\nfunction ensureTrailingLF(str: string): string {\r\n    return str.match(/\\n$/) ? str : str + \"\\n\";\r\n}\r\n/**\r\n * read a DER or PEM certificate from file\r\n */\r\nexport function readPrivateKey(filename: string): PrivateKey {\r\n    if (filename.match(/.*\\.der/)) {\r\n        const der: Buffer = fs.readFileSync(filename);\r\n        return myCreatePrivateKey(der);\r\n    } else {\r\n        const raw_key: string = _readPemFile(filename);\r\n        return myCreatePrivateKey(raw_key);\r\n    }\r\n}\r\n\r\nexport function readCertificatePEM(filename: string): CertificatePEM {\r\n    return _readPemFile(filename);\r\n}\r\n\r\nexport function readPublicKeyPEM(filename: string): PublicKeyPEM {\r\n    return _readPemFile(filename);\r\n}\r\n/**\r\n *\r\n * @deprecated\r\n */\r\nexport function readPrivateKeyPEM(filename: string): PrivateKeyPEM {\r\n    return _readPemFile(filename);\r\n}\r\n\r\nlet _g_certificate_store: string = \"\";\r\n\r\nexport function setCertificateStore(store: string): string {\r\n    const old_store = _g_certificate_store;\r\n    _g_certificate_store = store;\r\n    return old_store;\r\n}\r\nexport function getCertificateStore(): string {\r\n    if (!_g_certificate_store) {\r\n        _g_certificate_store = path.join(__dirname, \"../../certificates/\");\r\n    }\r\n    return _g_certificate_store;\r\n}\r\n/**\r\n *\r\n * @param filename\r\n */\r\nexport function readPrivateRsaKey(filename: string): PrivateKey {\r\n    if (!createPrivateKey) {\r\n        throw new Error(\"createPrivateKey is not supported in this environment\");\r\n    }\r\n    if (filename.substring(0, 1) !== \".\" && !fs.existsSync(filename)) {\r\n        filename = path.join(getCertificateStore(),filename);\r\n    }\r\n    const content = fs.readFileSync(filename, \"utf8\");\r\n    const sshKey = sshpk.parsePrivateKey(content, \"auto\");\r\n    const key = sshKey.toString(\"pkcs1\") as PEM;\r\n    const hidden = createPrivateKey({ format: \"pem\", type: \"pkcs1\", key });\r\n    return { hidden };\r\n}\r\n\r\nexport function readPublicRsaKey(filename: string): PublicKey {\r\n    if (filename.substring(0, 1) !== \".\" && !fs.existsSync(filename)) {\r\n        filename = path.join(getCertificateStore(), filename);\r\n    }\r\n    const content = fs.readFileSync(filename, \"utf-8\");\r\n    const sshKey = sshpk.parseKey(content, \"ssh\");\r\n    const key = sshKey.toString(\"pkcs1\") as PEM;\r\n    return createPublicKey({ format: \"pem\", type: \"pkcs1\", key });\r\n}\r\n","// ---------------------------------------------------------------------------------------------------------------------\r\n// node-opcua-crypto\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\r\n// Copyright (c) 2022-2024 - Sterfive.com\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n//\r\n// This  project is licensed under the terms of the MIT license.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\n// Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\nimport fs from \"fs\";\r\nimport { promisify } from \"util\";\r\nimport { convertPEMtoDER } from \"../source/crypto_utils.js\";\r\nimport { CertificateRevocationList } from \"../source/common.js\";\r\n\r\nexport async function readCertificateRevocationList(filename: string): Promise<CertificateRevocationList> {\r\n    const crl = await promisify(fs.readFile)(filename);\r\n    if (crl[0] === 0x30 && crl[1] === 0x82) {\r\n        // der format\r\n        return crl as CertificateRevocationList;\r\n    }\r\n    const raw_crl = crl.toString();\r\n    return convertPEMtoDER(raw_crl);\r\n}\r\n","// ---------------------------------------------------------------------------------------------------------------------\r\n// node-opcua-crypto\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\r\n// Copyright (c) 2022-2024 - Sterfive.com\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n//\r\n// This  project is licensed under the terms of the MIT license.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\n// Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\nimport fs from \"fs\";\r\nimport { promisify } from \"util\";\r\nimport { convertPEMtoDER } from \"../source/crypto_utils.js\";\r\nimport { CertificateRevocationList } from \"../source/common.js\";\r\n\r\nexport type CertificateSigningRequest = Buffer;\r\n\r\nexport async function readCertificateSigningRequest(filename: string): Promise<CertificateSigningRequest> {\r\n    const csr = await promisify(fs.readFile)(filename);\r\n    if (csr[0] === 0x30 && csr[1] === 0x82) {\r\n        // der format\r\n        return csr as CertificateRevocationList;\r\n    }\r\n    const raw_crl = csr.toString();\r\n    return convertPEMtoDER(raw_crl);\r\n}\r\n","// ---------------------------------------------------------------------------------------------------------------------\r\n// node-opcua-crypto\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\r\n// Copyright (c) 2022-2024 - Sterfive.com\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n//\r\n// This  project is licensed under the terms of the MIT license.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\n// Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\nimport fs from \"fs\";\r\nimport { generateKeyPair, privateKeyToPEM } from \"../source/index.js\";\r\nimport jsrsasign from \"jsrsasign\";\r\nexport async function generatePrivateKeyFile(privateKeyFilename: string, modulusLength: 1024 | 2048 | 3072 | 4096) {\r\n    const keys = await generateKeyPair(modulusLength);\r\n    const privateKeyPem = await privateKeyToPEM(keys.privateKey);\r\n    await fs.promises.writeFile(privateKeyFilename, privateKeyPem.privPem, \"utf-8\");\r\n    privateKeyPem.privPem = \"\";\r\n    privateKeyPem.privDer = new Uint8Array(0);\r\n}\r\n\r\n/**\r\n * alternate function to generate PrivateKeyFile, using jsrsasign.\r\n * \r\n * This function is slower than generatePrivateKeyFile\r\n */\r\nexport async function generatePrivateKeyFileAlternate(privateKeyFilename: string, modulusLength: 2048 | 3072 | 4096) {\r\n    \r\n    const kp = jsrsasign.KEYUTIL.generateKeypair(\"RSA\", modulusLength);\r\n    const prv = kp.prvKeyObj;\r\n    const pub = kp.pubKeyObj;\r\n    const prvpem = jsrsasign.KEYUTIL.getPEM(prv, \"PKCS8PRV\");\r\n    // const pubpem = jsrsasign.KEYUTIL.getPEM(pub, \"PKCS8PUB\");\r\n    await fs.promises.writeFile(privateKeyFilename, prvpem, \"utf-8\");\r\n}\r\n"],"mappings":"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","names":["fs","fs","fs","promisify","promisify","fs","fs","fs"]}