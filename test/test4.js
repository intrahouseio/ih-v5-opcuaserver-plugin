const {
    OPCUAServer,
    OPCUACertificateManager,
    SecurityPolicy,
    MessageSecurityMode
} = require("node-opcua");

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ node-opcua-crypto
const {
    generatePrivateKey,
    privateKeyToPEM,
    createSelfSignedCertificate
} = require("node-opcua-crypto");

const fs = require("fs");
const path = require("path");

// –ü—É—Ç–∏
const certificateFolder = path.join(__dirname, "certificates");
const clientCertsOutput = path.join(__dirname, "client-certs");

const certificateFile = path.join(certificateFolder, "own/certs/server_certificate.pem");
const privateKeyFile = path.join(certificateFolder, "own/private/private_key.pem");

const clientPrivateKeyFile = path.join(clientCertsOutput, "client_private_key.pem");
const clientCertificateFile = path.join(clientCertsOutput, "client_certificate.pem");

const clientApplicationUri = "urn:client:MyOPCUAClient";

async function ensureDir(dir) {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
}

async function generateClientCertificate() {
    await ensureDir(clientCertsOutput);

    if (fs.existsSync(clientCertificateFile)) {
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", clientCertificateFile);
        return;
    }

    console.log("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ node-opcua-crypto...");

    // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    const privateKey = await generatePrivateKey();
    const { privPem } = await privateKeyToPEM(privateKey);
    fs.writeFileSync(clientPrivateKeyFile, privPem);
    console.log("üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω");

    // 2. –ß—Ç–µ–Ω–∏–µ CA –¥–∞–Ω–Ω—ã—Ö
    const caCertificate = fs.readFileSync(certificateFile);
    const caPrivateKeyPEM = fs.readFileSync(privateKeyFile, "utf-8");

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ CA
    const { cert } = await createSelfSignedCertificate({
        privateKey: caPrivateKeyPEM,       // –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á CA (—Å–µ—Ä–≤–µ—Ä–∞)
        publicKey: privateKey,             // –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞
        notAfter: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),
        notBefore: new Date(),
        subject: "/CN=OPC UA Client",
        dns: ["localhost"],
        ip: ["127.0.0.1"],
        applicationUri: clientApplicationUri,
        keyUsage: [
            "digitalSignature",
            "keyEncipherment",
            "dataEncipherment"
        ],
        extendedKeyUsage: ["clientAuth"],
        isCA: false,
        issuerCertificate: caCertificate
    });

    fs.writeFileSync(clientCertificateFile, cert);
    console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    console.log("   ‚Üí", clientCertificateFile);
    console.log("   ‚Üí", clientPrivateKeyFile);
}

async function startServer() {
    try {
        const serverCertificateManager = new OPCUACertificateManager({
            rootFolder: certificateFolder
        });
        await serverCertificateManager.initialize();
        console.log("‚úÖ Certificate manager initialized");

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        await generateClientCertificate();

        const server = new OPCUAServer({
            port: 4334,
            serverInfo: {
                applicationUri: "urn:MacBook-Air-2.local:IntraServer",
                applicationName: { text: "IntraServer", locale: "en" },
                productUri: "NodeOPCUA-IntraServer"
            },
            resourcePath: '/UA/IntraServer',
            certificateFile: certificateFile,
            privateKeyFile: privateKeyFile,
            serverCertificateManager: serverCertificateManager,
            securityPolicies: [
                SecurityPolicy.Basic256Sha256,
                SecurityPolicy.Basic128Rsa15,
                SecurityPolicy.None
            ],
            securityModes: [
                MessageSecurityMode.SignAndEncrypt,
                MessageSecurityMode.Sign,
                MessageSecurityMode.None
            ],
            allowAnonymous: false
        });

        await server.start();
        console.log("üü¢ Server running on opc.tcp://MacBook-Air-2.local:4334/UA/IntraServer");
    } catch (err) {
        console.error("‚ùå Server error:", err);
    }
}

startServer().catch(console.error);