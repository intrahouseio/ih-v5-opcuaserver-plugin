const { OPCUAServer, OPCUAClient, AttributeIds, MessageSecurityMode, SecurityPolicy, DataType, UserTokenType, OPCUACertificateManager } = require("node-opcua");
const fs = require("fs").promises;
const path = require("path");
const os = require("os");
const { createPrivateKey } = require("crypto");

// –ü–∞–ø–∫–∏ –∏ –ø—É—Ç–∏ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const serverPKIDir = path.join(__dirname, "pki_server");
const clientPKIDir = path.join(__dirname, "pki_client");
const serverCertPath = path.join(serverPKIDir, "own/certs/server_certificate.pem");
const serverKeyPath = path.join(serverPKIDir, "own/private/private_key.pem");
const serverCertDerPath = path.join(serverPKIDir, "own/certs/server_certificate.der");
const clientCertPath = path.join(clientPKIDir, "own/certs/client_certificate.pem");
const clientKeyPath = path.join(clientPKIDir, "own/private/private_key.pem");
const clientCertDerPath = path.join(clientPKIDir, "own/certs/client_certificate.der");

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ applicationUri
function getApplicationUri(isServer = false) {
    const hostname = os.hostname();
    return `urn:${hostname}:NodeOPCUA-${isServer ? "Server" : "Client"}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function fileExists(filePath) {
    try {
        await fs.access(filePath);
        return true;
    } catch {
        return false;
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
async function initializeServerCertificates() {
    const pkiDir = serverPKIDir;
    const certificateFile = serverCertPath;
    const certificateDerFile = serverCertDerPath;
    const privateKeyFile = serverKeyPath;
    const name = "ServerExample";
    const applicationUri = getApplicationUri(true);
    console.log(`üîç Application URI for server: ${applicationUri}`);
    
    const cm = new OPCUACertificateManager({
        rootFolder: pkiDir,
        name,
        automaticallyAcceptUnknownCertificate: true
    });

    await cm.initialize();
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π PKI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ ${pkiDir}`);

    if (!(await fileExists(certificateFile))) {
        console.log(`–°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å applicationUri: ${applicationUri}`);
        await cm.createSelfSignedCertificate({
            applicationUri,
            subject: `/CN=${name}/O=NodeOPCUA`,
            startDate: new Date(),
            validity: 365 * 24 * 60 * 60 * 1000, // 1 –≥–æ–¥
            dns: [os.hostname(), "localhost"],
            ip: ["127.0.0.1"],
            outputFile: certificateFile,
        });
        console.log(`‚úÖ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ${certificateFile}`);

        console.log(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞...`);
        const pemContent = await fs.readFile(certificateFile, "utf8");
        const base64Cert = pemContent
            .replace(/-----BEGIN CERTIFICATE-----/g, "")
            .replace(/-----END CERTIFICATE-----/g, "")
            .replace(/\r?\n|\r/g, "")
            .trim();
        const derBuffer = Buffer.from(base64Cert, "base64");
        await fs.mkdir(path.dirname(certificateDerFile), { recursive: true });
        await fs.writeFile(certificateDerFile, derBuffer);
        console.log(`‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ${certificateDerFile}`);
    } else {
        console.log(`‚úÖ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${certificateFile}`);
        if (!(await fileExists(certificateDerFile))) {
            console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PEM –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞...`);
            const pemContent = await fs.readFile(certificateFile, "utf8");
            const base64Cert = pemContent
                .replace(/-----BEGIN CERTIFICATE-----/g, "")
                .replace(/-----END CERTIFICATE-----/g, "")
                .replace(/\r?\n|\r/g, "")
                .trim();
            const derBuffer = Buffer.from(base64Cert, "base64");
            await fs.mkdir(path.dirname(certificateDerFile), { recursive: true });
            await fs.writeFile(certificateDerFile, derBuffer);
            console.log(`‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ${certificateDerFile}`);
        } else {
            console.log(`‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${certificateDerFile}`);
        }
    }

    return { certificateFile, privateKeyFile, certificateDerFile, cm };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
async function initializeClientCertificates() {
    const pkiDir = clientPKIDir;
    const certificateFile = clientCertPath;
    const certificateDerFile = clientCertDerPath;
    const privateKeyFile = clientKeyPath;
    const name = "ClientExample";
    const applicationUri = getApplicationUri(false);
    console.log(`üîç Application URI for client: ${applicationUri}`);
    
    const cm = new OPCUACertificateManager({
        rootFolder: pkiDir,
        name,
        automaticallyAcceptUnknownCertificate: true
    });

    await cm.initialize();
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π PKI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ ${pkiDir}`);

    if (!(await fileExists(certificateFile))) {
        console.log(`–°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å applicationUri: ${applicationUri}`);
        await cm.createSelfSignedCertificate({
            applicationUri,
            subject: `/CN=${name}/O=NodeOPCUA`,
            startDate: new Date(),
            validity: 365 * 24 * 60 * 60 * 1000, // 1 –≥–æ–¥
            dns: [os.hostname(), "localhost"],
            ip: ["127.0.0.1"],
            outputFile: certificateFile,
        });
        console.log(`‚úÖ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ${certificateFile}`);

        console.log(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞...`);
        const pemContent = await fs.readFile(certificateFile, "utf8");
        const base64Cert = pemContent
            .replace(/-----BEGIN CERTIFICATE-----/g, "")
            .replace(/-----END CERTIFICATE-----/g, "")
            .replace(/\r?\n|\r/g, "")
            .trim();
        const derBuffer = Buffer.from(base64Cert, "base64");
        await fs.mkdir(path.dirname(certificateDerFile), { recursive: true });
        await fs.writeFile(certificateDerFile, derBuffer);
        console.log(`‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ${certificateDerFile}`);
    } else {
        console.log(`‚úÖ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${certificateFile}`);
        if (!(await fileExists(certificateDerFile))) {
            console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PEM –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞...`);
            const pemContent = await fs.readFile(certificateFile, "utf8");
            const base64Cert = pemContent
                .replace(/-----BEGIN CERTIFICATE-----/g, "")
                .replace(/-----END CERTIFICATE-----/g, "")
                .replace(/\r?\n|\r/g, "")
                .trim();
            const derBuffer = Buffer.from(base64Cert, "base64");
            await fs.mkdir(path.dirname(certificateDerFile), { recursive: true });
            await fs.writeFile(certificateDerFile, derBuffer);
            console.log(`‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ${certificateDerFile}`);
        } else {
            console.log(`‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${certificateDerFile}`);
        }
    }

    return { certificateFile, privateKeyFile, certificateDerFile, cm };
}

// –°–µ—Ä–≤–µ—Ä OPC UA
async function startServer() {
    const { certificateFile, privateKeyFile, certificateDerFile, cm } = await initializeServerCertificates();

    const server = new OPCUAServer({
        port: 26543,
        resourcePath: "/UA/MyServer",
        certificateFile,
        privateKeyFile,
        securityModes: [MessageSecurityMode.SignAndEncrypt],
        securityPolicies: [SecurityPolicy.Basic256Sha256],
        allowAnonymous: false,
        serverCertificateManager: cm,
        /*userTokenPolicy: [
            {
                tokenType: UserTokenType.Certificate,
                securityPolicyUri: SecurityPolicy.Basic256Sha256,
            },
        ],*/
    });

    try {
        await server.initialize();

        const addressSpace = server.engine.addressSpace;
        const namespace = addressSpace.getOwnNamespace();

        namespace.addVariable({
            organizedBy: addressSpace.rootFolder.objects,
            browseName: "MyVariable",
            nodeId: "s=MyVariable",
            dataType: "Double",
            value: { dataType: DataType.Double, value: 42.0 },
        });

        console.log("–°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Endpoint:", server.endpoints[0].endpointDescriptions()[0].endpointUrl);
        await server.start();
        console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err.message);
        throw err;
    }
}

// –ö–ª–∏–µ–Ω—Ç OPC UA
async function startClient() {
    const { certificateFile, privateKeyFile, certificateDerFile, cm } = await initializeClientCertificates();

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –°–ï–†–í–ï–†–ù–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢ –í –î–û–í–ï–†–ï–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê ===


    const client = OPCUAClient.create({
        endpointMustExist: false,
        securityMode: MessageSecurityMode.SignAndEncrypt,
        securityPolicy: SecurityPolicy.Basic256Sha256,
        certificateFile,
        privateKeyFile,
        clientCertificateManager: cm,
        defaultSecureTokenLifetime: 60000,
    });

    const endpointUrl = "opc.tcp://localhost:26543/UA/MyServer";
//const endpointUrl = "opc.tcp://localhost:4334/UA/IntraServer";
    try {
        await client.connect(endpointUrl);
        console.log("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫", endpointUrl);

        const endpoints = await client.getEndpoints();
        console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint'—ã:");
        endpoints.forEach((endpoint, index) => {
            console.log(`Endpoint ${index}:`, endpoint.endpointUrl, "UserTokenPolicies:", endpoint.userIdentityTokens);
        });

        const certificateEndpoint = endpoints.find((endpoint) =>
            endpoint.userIdentityTokens.some((policy) => policy.tokenType === UserTokenType.Certificate)
        );
        if (!certificateEndpoint) {
            throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω endpoint —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UserTokenType.Certificate");
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ –æ–±—ä–µ–∫—Ç –∫–ª—é—á–∞
        const privateKeyPem = await fs.readFile(privateKeyFile, "utf8");
        console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:", privateKeyPem.substring(0, 100) + "...");
        const privateKeyObject = createPrivateKey({
            key: privateKeyPem,
            format: "pem",
           // type: "pkcs8"
        });
        console.log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω
        if (privateKeyObject.asymmetricKeyType) {
            console.log(`‚úÖ –¢–∏–ø –∫–ª—é—á–∞: ${privateKeyObject.asymmetricKeyType}`);
            console.log(`‚úÖ –†–∞–∑–º–µ—Ä –∫–ª—é—á–∞: ${privateKeyObject.asymmetricKeyDetails?.modulusLength || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ UserIdentityInfo —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º
        const pemContent = await fs.readFile(certificateDerFile);
        const userIdentityInfo = {
            type: UserTokenType.Certificate,
            certificateData:pemContent,
            privateKey: privateKeyObject,
        };
        console.log("UserIdentityInfo —Å–æ–∑–¥–∞–Ω:", userIdentityInfo);

        const session = await client.createSession(userIdentityInfo);
        console.log("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞");

        const dataValue = await session.read({
            nodeId: "ns=1;s=MyVariable",
            attributeId: AttributeIds.Value,
        });
        console.log("–ó–Ω–∞—á–µ–Ω–∏–µ MyVariable:", dataValue.value.value);

        await session.close();
        await client.disconnect();
        console.log("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:", err.message);
        throw err;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
(async () => {
    try {
        await startServer();
        await new Promise((resolve) => setTimeout(resolve, 1000));
        await startClient();
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err.message);
    }
})();