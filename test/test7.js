const opcua = require("node-opcua");
const fs = require("fs");
const path = require("path");

async function simpleClientTest() {
    try {
        console.log("üîê –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π X509...");

        // –£–∫–∞–∑—ã–≤–∞–µ–º applicationUri
        const applicationUri = 'urn:SimpleClient:NodeOPCUA';
        console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Application URI:", applicationUri);

        // –ü—É—Ç—å –∫ PKI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        const clientPKIDir = path.join(__dirname, "client_pki");

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(clientPKIDir)) {
            fs.mkdirSync(clientPKIDir, { recursive: true });
        }

        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        const clientCM = new opcua.OPCUACertificateManager({
            rootFolder: clientPKIDir,
            name: "SimpleClientPKI"
        });

        await clientCM.initialize();

        const certificateFile = path.join(clientPKIDir, "own/certs/client_cert.pem");
        const privateKeyFile = path.join(clientPKIDir, "own/private/private_key.pem");

        // –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(certificateFile)) {
            console.log("–°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...");
            await clientCM.createSelfSignedCertificate({
                applicationUri: applicationUri,
                subject: "/CN=SimpleClient/O=NodeOPCUA",
                startDate: new Date(),
                validity: 365 * 24 * 60 * 60 * 1000, // 1 –≥–æ–¥
                dns: ["localhost"],
                ip: ["127.0.0.1"],
                outputFile: certificateFile,
                privateKeyFile: privateKeyFile
            });
            console.log("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á —Å–æ–∑–¥–∞–Ω—ã");
        } else {
            console.log("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        const certificate = fs.readFileSync(certificateFile);
        const privateKey = fs.readFileSync(privateKeyFile);

        console.log("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
        console.log("üìÅ PEM —Ñ–∞–π–ª:", certificateFile);
        console.log("üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:", privateKeyFile);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        const client = opcua.OPCUAClient.create({
            endpointMustExist: false,
            securityMode: opcua.MessageSecurityMode.SignAndEncrypt,
            securityPolicy: opcua.SecurityPolicy.Basic256Sha256,
            applicationName: "SimpleClient",
            clientCertificate: certificate,
            clientPrivateKey: privateKey,
            certificateManager: clientCM // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        });

        console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        await client.connect("opc.tcp://localhost:5004");
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints —Å–µ—Ä–≤–µ—Ä–∞...");
        const endpoints = await client.getEndpoints();
        console.log("Endpoints:", JSON.stringify(endpoints.map(ep => ({
            endpointUrl: ep.endpointUrl,
            securityMode: ep.securityMode,
            securityPolicyUri: ep.securityPolicyUri,
            userIdentityTokens: ep.userIdentityTokens
        })), null, 2));

        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É X.509
        const userIdentity = {
            type: 2,
            certificateData: certificate
        };

        console.log("üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É...");
        console.log("UserIdentity:", userIdentity);
        const session = await client.createSession(userIdentity);
        console.log("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!");

        // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        console.log("üîç –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...");
        const dataValue = await session.readVariableValue("ns=1;s=MyVariable");
        console.log("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:", dataValue.value.value);

        // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        console.log("‚úèÔ∏è –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...");
        await session.write({
            nodeId: "ns=1;s=MyVariable",
            attributeId: opcua.AttributeIds.Value,
            value: {
                value: {
                    dataType: opcua.DataType.Double,
                    value: 555.55
                }
            }
        });
        console.log("‚úÖ –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
        const newValue = await session.readVariableValue("ns=1;s=MyVariable");
        console.log("‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", newValue.value.value);

        await session.close();
        await client.disconnect();
        console.log("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
        if (error.stack) {
            console.error("Stack:", error.stack);
        }
        console.log("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
        console.log("1. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (pki/trusted/certs)");
        console.log("2. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (client_pki/pki/trusted/certs)");
        console.log("3. –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é X509");
        console.log("4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ –∫–ª—é—á–∞");
        console.log("5. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ opc.tcp://localhost:4334");
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å X509...");
simpleClientTest();