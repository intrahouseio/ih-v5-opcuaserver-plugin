// explicit_client.js
const opcua = require("node-opcua");
const fs = require("fs");
const path = require("path");

async function explicitClientTest() {
    try {
        console.log("üîê –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —è–≤–Ω—ã–º applicationUri...");

        // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º applicationUri
        const applicationUri = 'urn:Air-Maksim:NodeOPCUA-Client';
        console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Application URI:", applicationUri);

        // –ü—É—Ç—å –∫ PKI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        const clientPKIDir = path.join(__dirname, "explicit_client_pki");

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(clientPKIDir)) {
            fs.mkdirSync(clientPKIDir, { recursive: true });
        }

        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        const clientCM = new opcua.OPCUACertificateManager({
            rootFolder: clientPKIDir,
            name: "ExplicitClient"
        });

        await clientCM.initialize();

        const certificateFile = path.join(clientPKIDir, "own/certs/explicit_client.pem");
        const privateKeyFile = path.join(clientPKIDir, "own/private/private_key.pem");
        const certificateDerFile = path.join(clientPKIDir, "own/certs/explicit_client.der");

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º applicationUri
        if (!fs.existsSync(certificateFile)) {
            console.log("–°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —è–≤–Ω—ã–º applicationUri...");

            await clientCM.createSelfSignedCertificate({
                applicationUri: applicationUri,
                subject: "/CN=ExplicitClient/O=NodeOPCUA",
                startDate: new Date(),
                validity: 365 * 24 * 60 * 60 * 1000,
                dns: ["Air-Maksim", "localhost"],
                ip: ["127.0.0.1"],
                outputFile: certificateFile
            });

            console.log("‚úÖ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω");

            // –ì–ï–ù–ï–†–ò–†–£–ï–ú DER –°–ï–†–¢–ò–§–ò–ö–ê–¢ –î–õ–Ø –î–†–£–ì–ò–• –ö–õ–ò–ï–ù–¢–û–í
            console.log("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...");
            const pemContent = fs.readFileSync(certificateFile, "utf8");
            const base64Cert = pemContent
                .replace(/-----BEGIN CERTIFICATE-----/g, "")
                .replace(/-----END CERTIFICATE-----/g, "")
                .replace(/\r?\n|\r/g, "")
                .trim();
            const derBuffer = Buffer.from(base64Cert, "base64");
            fs.writeFileSync(certificateDerFile, derBuffer);
            console.log("‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω:", certificateDerFile);

        } else {
            console.log("‚úÖ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

            // –ï–°–õ–ò PEM –°–£–©–ï–°–¢–í–£–ï–¢, –ù–û DER –ù–ï–¢ - –°–û–ó–î–ê–ï–ú DER
            if (!fs.existsSync(certificateDerFile)) {
                console.log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PEM...");
                const pemContent = fs.readFileSync(certificateFile, "utf8");
                const base64Cert = pemContent
                    .replace(/-----BEGIN CERTIFICATE-----/g, "")
                    .replace(/-----END CERTIFICATE-----/g, "")
                    .replace(/\r?\n|\r/g, "")
                    .trim();
                const derBuffer = Buffer.from(base64Cert, "base64");
                fs.writeFileSync(certificateDerFile, derBuffer);
                console.log("‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ PEM:", certificateDerFile);
            } else {
                console.log("‚úÖ DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º PEM –¥–ª—è node-opcua)
        const certificate = fs.readFileSync(certificateFile);
        const privateKey = fs.readFileSync(privateKeyFile);

        console.log("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
        console.log("üìÅ PEM —Ñ–∞–π–ª:", certificateFile);
        console.log("üìÅ DER —Ñ–∞–π–ª:", certificateDerFile);
        console.log("üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:", privateKeyFile);

        // –°–û–ó–î–ê–ï–ú –ö–õ–ò–ï–ù–¢–ê
        const client = opcua.OPCUAClient.create({
            endpointMustExist: false,
            securityMode: opcua.MessageSecurityMode.SignAndEncrypt,
            securityPolicy: opcua.SecurityPolicy.Basic256Sha256,
            applicationName: "ExplicitClient",
            clientCertificate: certificate,
            clientPrivateKey: privateKey,
            certificateManager: clientCM
            // applicationUri –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∑—è—Ç –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        });

        console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        await client.connect("opc.tcp://localhost:4334/UA/IntraServer");
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!");
        const endpoints = await client.getEndpoints();
        const serverCertificate = endpoints[0].serverCertificate; // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞
        fs.writeFileSync(path.join(clientPKIDir, "certs/trusted/server_certificate.pem"), serverCertificate);
        // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û –°–ï–†–¢–ò–§–ò–ö–ê–¢–£ X.509
        const userIdentity = {
            type: 2,
            //certificateData: certificate,
            // privateKey: Buffer.from(privateKey.toString())
        };

        console.log("üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É...");
        const session = await client.createSession(userIdentity);
        console.log("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!");

        // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        console.log("üîç –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...");
        const dataValue = await session.readVariableValue("ns=1;s=MyVariable");
        console.log("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:", dataValue.value.value);

        // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        console.log("‚úèÔ∏è  –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...");
        await session.write({
            nodeId: "ns=1;s=MyVariable",
            attributeId: opcua.AttributeIds.Value,
            value: {
                value: {
                    dataType: opcua.DataType.Double,
                    value: 555.55
                }
            }
        });
        console.log("‚úÖ –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
        const newValue = await session.readVariableValue("ns=1;s=MyVariable");
        console.log("‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", newValue.value.value);

        await session.close();
        await client.disconnect();
        console.log("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
        if (error.stack) {
            console.error("Stack:", error.stack);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if (error.message.includes("Certificate")) {
            console.log("\nüîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º:");
            console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
            console.log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ applicationUri –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:", 'urn:Air-Maksim:NodeOPCUA-Client');
            console.log("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã");
        }

        if (error.message.includes("connection")) {
            console.log("\nüîç –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:");
            console.log("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:4334");
            console.log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function checkCertificateInfo() {
    try {
        const clientPKIDir = path.join(__dirname, "explicit_client_pki");
        const certificateFile = path.join(clientPKIDir, "own/certs/explicit_client.pem");

        if (fs.existsSync(certificateFile)) {
            const certificateContent = fs.readFileSync(certificateFile, "utf8");
            console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:");
            console.log("–§–∞–π–ª:", certificateFile);
            console.log("–†–∞–∑–º–µ—Ä:", certificateContent.length, "–±–∞–π—Ç");

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è applicationUri –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
            if (certificateContent.includes('urn:Air-Maksim:NodeOPCUA-Client')) {
                console.log("‚úÖ ApplicationUri –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ");
            } else {
                console.log("‚ö†Ô∏è  ApplicationUri –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ");
            }
        }
    } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:", error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log("üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å —è–≤–Ω—ã–º applicationUri...");
//checkCertificateInfo();
explicitClientTest();