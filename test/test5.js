const fs = require("fs").promises;
const path = require("path");
const {
    opcua,
    OPCUAServer,
    OPCUACertificateManager,
    nodesets,
    Variant,
    DataType,
    UserTokenType,
    MessageSecurityMode,
    SecurityPolicy,
    StatusCodes,
    UserManager,
    makeRoles
} = require("node-opcua");
const os = require("os");
const util = require("util");
process.env.NODEOPCUADEBUG = "CLIENT{TRACE},SERVER{TRACE},SECURITY{TRACE}";
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ node-opcua
const nodeOpcuaVersion = require("node-opcua/package.json").version || "unknown";
console.log(`üîç –í–µ—Ä—Å–∏—è node-opcua: ${nodeOpcuaVersion}`);

async function startServer() {
    const serverPKIDir = path.join(__dirname, "server_pki");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ PKI
    if (!await fs.access(serverPKIDir).catch(() => false)) {
        await fs.mkdir(serverPKIDir, { recursive: true });
    }

    const serverCM = new OPCUACertificateManager({
        name: "ServerCertificateManager",
        rootFolder: serverPKIDir,
        automaticallyAcceptUnknownCertificate: true // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å false
    });

    await serverCM.initialize();

    const users = [
        { username: "admin", password: "secret", role: "admin" },
        { username: "operator", password: "pass123", role: "operator" }
    ];



    const userTokenPolicies = [
        {
            policyId: "AnonymousPolicy",
            tokenType: UserTokenType.Anonymous,
            securityPolicyUri: "http://opcfoundation.org/UA/SecurityPolicy#None"
        },
        {
            policyId: "UsernamePolicy",
            tokenType: UserTokenType.UserName,
            securityPolicyUri: "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256"
        },
        {
            policyId: "CertificatePolicy",
            tokenType: UserTokenType.Certificate,
            securityPolicyUri: "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256"
        }
    ];

    const server = new OPCUAServer({
        port: 26543,
        nodeset_filename: [nodesets.standard],
        securityPolicies: [SecurityPolicy.None, SecurityPolicy.Basic256Sha256],
        securityModes: [MessageSecurityMode.None, MessageSecurityMode.Sign, MessageSecurityMode.SignAndEncrypt],
        serverCertificateManager: serverCM,
        clientCertificateManager: serverCM,
        userTokenPolicies: [
            UserTokenType.Anonymous, // Allow anonymous access
            UserTokenType.UserName   // Allow username/password authentication
        ],
        userIdentityTokens: 1,
        userManager : {
            isValidUser: async (session, username, password) => {
                const token = session.userIdentityToken;
                console.log(token)
                if (token?.tokenType === UserTokenType.CERTIFICATE) {
                    // –î–ª—è X509 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    const cn = extractCNFromCertificate(token.userCertificate);

                    // –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                    session.user = {
                        username: cn,
                        authMethod: "x509",
                        roles: getRolesForCertificateUser(cn),
                        permissions: getPermissionsForUser(cn)
                    };

                    return true; // –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...
                return true;
            }
        },
        serverInfo: {
            applicationUri: "urn:" + os.hostname() + ":NodeOPCUA-Server",
            productUri: "urn:NodeOPCUA:Server",
            applicationName: { text: "Fixed Test OPC UA Server" }
        }
    });



    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Common Name –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    function extractCommonNameFromCertificate(certificate) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        // –ù–∞–ø—Ä–∏–º–µ—Ä: const forge = require('node-forge');
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä

        try {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è CN –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            return "admin-client";
        } catch (error) {
            console.error("Error parsing certificate:", error);
            return "unknown";
        }
    }

    await server.initialize();

    console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    const addressSpace = server.engine.addressSpace;
    const namespace = addressSpace.getOwnNamespace();

    const myDevice = namespace.addObject({
        organizedBy: addressSpace.rootFolder.objects,
        browseName: "MyTestDevice"
    });

    let testVariable = 42.0;
    namespace.addVariable({
        componentOf: myDevice,
        nodeId: "ns=1;s=MyVariable",
        browseName: "MyVariable",
        dataType: "Double",
        minimumSamplingInterval: 100,
        value: {
            get: () => new Variant({ dataType: DataType.Double, value: testVariable }),
            set: (variant) => {
                testVariable = parseFloat(variant.value);
                return StatusCodes.Good;
            }
        }
    });

    await server.start();
    console.log("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä OPC UA –∑–∞–ø—É—â–µ–Ω!");
    console.log("üåê Endpoint URL:", server.endpoints[0].endpointDescriptions()[0].endpointUrl);
    console.log("üîë –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º!");

    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ userIdentityTokens –≤ endpoint'–∞—Ö:");
    server.endpoints.forEach((ep, index) => {
        const descriptions = ep.endpointDescriptions();
        descriptions.forEach(d => {
            console.log(`\nEndpoint ${index + 1}:`);
            //console.log(`\d ${util.inspect(d)}:`);
            console.log(`  Security: ${MessageSecurityMode[d.securityMode]} + ${d.securityPolicyUri}`);
            if (d.userIdentityTokens && d.userIdentityTokens.length > 0) {
                d.userIdentityTokens.forEach(p => {
                    console.log(`    üîê ${UserTokenType[p.tokenType]} [${p.policyId}] (Security: ${p.securityPolicyUri || "none"})`);
                });
            } else {
                console.log("    ‚ùå userIdentityTokens –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    server.on("createSession", (session) => {
        console.log("üÜï –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è:", session.sessionName || "unnamed");
    });

    server.on("session_activated", (session) => {
        const token = session.userIdentityToken;
        let user = "anonymous";
        if (token?.userName) user = token.userName;
        if (token?.certificateData) user = "certificate user";
        console.log("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);
    });

    server.on("session_closed", (session, reason) => {
        console.log("üîö –ó–∞–∫—Ä—ã—Ç–∞ —Å–µ—Å—Å–∏—è:", reason);
    });

    server.on("session_authentication_failed", (session, reason) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", reason.message || reason);
    });

    server.on("newChannel", (channel) => {
        console.log("üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç:", channel.remoteAddress);
    });

    server.on("closeChannel", (channel) => {
        console.log("üîå –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç:", channel.remoteAddress);
    });

    process.on("SIGINT", async () => {
        console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        await server.shutdown();
        console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        process.exit(0);
    });

    return server;
}

console.log("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ OPC UA —Å–µ—Ä–≤–µ—Ä–∞...");
startServer().catch(err => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err);
    console.error("Stack:", err.stack);
    process.exit(1);
});